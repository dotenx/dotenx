// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcClient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobStreamServiceClient is the client API for JobStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobStreamServiceClient interface {
	GetJobs(ctx context.Context, in *JobStreamRequest, opts ...grpc.CallOption) (JobStreamService_GetJobsClient, error)
	SubmitTaskResult(ctx context.Context, in *TaskResult, opts ...grpc.CallOption) (*Void, error)
	SetTaskStatus(ctx context.Context, in *TaskStatus, opts ...grpc.CallOption) (*Void, error)
}

type jobStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobStreamServiceClient(cc grpc.ClientConnInterface) JobStreamServiceClient {
	return &jobStreamServiceClient{cc}
}

func (c *jobStreamServiceClient) GetJobs(ctx context.Context, in *JobStreamRequest, opts ...grpc.CallOption) (JobStreamService_GetJobsClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobStreamService_ServiceDesc.Streams[0], "/JobStreamService/GetJobs", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobStreamServiceGetJobsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JobStreamService_GetJobsClient interface {
	Recv() (*JobStreamResponse, error)
	grpc.ClientStream
}

type jobStreamServiceGetJobsClient struct {
	grpc.ClientStream
}

func (x *jobStreamServiceGetJobsClient) Recv() (*JobStreamResponse, error) {
	m := new(JobStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobStreamServiceClient) SubmitTaskResult(ctx context.Context, in *TaskResult, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/JobStreamService/SubmitTaskResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobStreamServiceClient) SetTaskStatus(ctx context.Context, in *TaskStatus, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/JobStreamService/setTaskStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobStreamServiceServer is the server API for JobStreamService service.
// All implementations must embed UnimplementedJobStreamServiceServer
// for forward compatibility
type JobStreamServiceServer interface {
	GetJobs(*JobStreamRequest, JobStreamService_GetJobsServer) error
	SubmitTaskResult(context.Context, *TaskResult) (*Void, error)
	SetTaskStatus(context.Context, *TaskStatus) (*Void, error)
	mustEmbedUnimplementedJobStreamServiceServer()
}

// UnimplementedJobStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobStreamServiceServer struct {
}

func (UnimplementedJobStreamServiceServer) GetJobs(*JobStreamRequest, JobStreamService_GetJobsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}
func (UnimplementedJobStreamServiceServer) SubmitTaskResult(context.Context, *TaskResult) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTaskResult not implemented")
}
func (UnimplementedJobStreamServiceServer) SetTaskStatus(context.Context, *TaskStatus) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTaskStatus not implemented")
}
func (UnimplementedJobStreamServiceServer) mustEmbedUnimplementedJobStreamServiceServer() {}

// UnsafeJobStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobStreamServiceServer will
// result in compilation errors.
type UnsafeJobStreamServiceServer interface {
	mustEmbedUnimplementedJobStreamServiceServer()
}

func RegisterJobStreamServiceServer(s grpc.ServiceRegistrar, srv JobStreamServiceServer) {
	s.RegisterService(&JobStreamService_ServiceDesc, srv)
}

func _JobStreamService_GetJobs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobStreamServiceServer).GetJobs(m, &jobStreamServiceGetJobsServer{stream})
}

type JobStreamService_GetJobsServer interface {
	Send(*JobStreamResponse) error
	grpc.ServerStream
}

type jobStreamServiceGetJobsServer struct {
	grpc.ServerStream
}

func (x *jobStreamServiceGetJobsServer) Send(m *JobStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _JobStreamService_SubmitTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobStreamServiceServer).SubmitTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JobStreamService/SubmitTaskResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobStreamServiceServer).SubmitTaskResult(ctx, req.(*TaskResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobStreamService_SetTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobStreamServiceServer).SetTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/JobStreamService/setTaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobStreamServiceServer).SetTaskStatus(ctx, req.(*TaskStatus))
	}
	return interceptor(ctx, in, info, handler)
}

// JobStreamService_ServiceDesc is the grpc.ServiceDesc for JobStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "JobStreamService",
	HandlerType: (*JobStreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTaskResult",
			Handler:    _JobStreamService_SubmitTaskResult_Handler,
		},
		{
			MethodName: "setTaskStatus",
			Handler:    _JobStreamService_SetTaskStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetJobs",
			Handler:       _JobStreamService_GetJobs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bridge.proto",
}
