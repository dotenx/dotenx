stages:
  - lambda_functions
  - build
  - deploy

variables:
  AWS_DEFAULT_REGION: us-east-1

lambda_functions:
  image: utopiops/devops:assume-role-17
  stage: lambda_functions
  services:
    - docker:stable-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
    AWS_ACCESS_KEY_ID: ${DEV_AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV_AWS_SECRET_ACCESS_KEY}
  script:
    - aws --version
    - |
      skip_lines=1
      # Read the file line by line, skipping the specified number of lines
      tail -n +$((skip_lines+1)) "functions.csv" | while IFS= read -r line; do
        echo "$line"  # Print each row
        # Extract columns from the row
        directory_path=$(echo "$line" | cut -d ',' -f 1)
        repository_name=$(echo "$line" | cut -d ',' -f 2)
        repository_tag=$(echo "$line" | cut -d ',' -f 3)
        type=$(echo "$line" | cut -d ',' -f 4)
        image_name="${repository_name}:${repository_tag}"
        function_name=$(echo $image_name | sed 's/\//-/g' | sed 's/:/-/g')

        echo $image_name
        echo $function_name

        aws lambda get-function --function-name "$function_name" 2>/dev/null; exit_code=$?
        echo $exit_code

        # Set the variable based on the exit code of the previous command
        if [ $exit_code -eq 0 ]; then
            function_exists=true
        else
            function_exists=false
            cd predefinedImages/"${type}s"/${directory_path}
            pwd
            docker build -t ${image_name} .
            docker tag ${image_name} ${DEV_ACCOUNT}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${image_name} # this line can change based on the local image name
            docker push ${DEV_ACCOUNT}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${image_name}
            aws lambda create-function --function-name ${function_name} \
              --package-type Image \
              --code ImageUri=${DEV_ACCOUNT}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${image_name} \
              --role arn:aws:iam::${DEV_ACCOUNT}:role/lambda-ex \
              --region ${AWS_DEFAULT_REGION} \
              --timeout 30
            cd ../../..
        fi

        echo "Function exists: $function_exists"
      done || true
  rules:
    - changes:
      - "functions.csv"

build api: &build
  image: utopiops/devops:assume-role-12
  stage: build
  services:
    - docker:stable-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
    ECR_REGISTRY_URL: "${DEV_ACCOUNT}.dkr.ecr.us-east-1.amazonaws.com"
    image_tag_commit_sha: ${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
    image_tag_pipeline_id: ${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_IID}
    environment: production
    AWS_ACCESS_KEY_ID: ${DEV_AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV_AWS_SECRET_ACCESS_KEY}
    repo_name: dotenx/api
    DOCKER_FILE_PATH: ao-api/Dockerfile
    FOLDER: ao-api
  script:
    - cd $FOLDER
    - docker version
    - cp .env.${environment} .env
    - cd -
    - docker build -f $DOCKER_FILE_PATH -t ${ECR_REGISTRY_URL}/${repo_name}:${image_tag_commit_sha} -t ${ECR_REGISTRY_URL}/${repo_name}:${image_tag_pipeline_id} .
    - docker push ${ECR_REGISTRY_URL}/${repo_name}:${image_tag_commit_sha}
    - docker push ${ECR_REGISTRY_URL}/${repo_name}:${image_tag_pipeline_id}
    - docker images
  rules:
    - changes:
      - "ao-api/**/*"


build ui: &build_ui
  image: node:16.15.1-slim
  stage: build
  services:
    - docker:stable-dind
  variables:
    environment: prod
    folder: ui
    build_dest: dist
  script:
    - cd ${folder}
    - cp .env.${environment} .env.production
    - npm install
    - CI='' npm run build
    - tar -czvf ${environment}_build.tar.gz ./${build_dest}
    - mv ${environment}_build.tar.gz ../${environment}_${folder}_build.tar.gz
  artifacts:
    paths:
      - ${environment}_${folder}_build.tar.gz
  rules:
    - changes:
      - "ui/**/*"

build ui-ecommerce:
  <<: *build_ui
  variables:
    environment: prod
    folder: ui-ecommerce
    build_dest: dist
  rules:
    - changes:
      - "ui-ecommerce/**/*"

build ui-form:
  <<: *build_ui
  variables:
    environment: prod
    folder: ui-form
    build_dest: dist
  rules:
    - changes:
      - "ui-form/**/*"

build ui builder:
  <<: *build_ui
  variables:
    environment: prod
    folder: ui-builder
    build_dest: dist
  rules:
    - changes:
      - "ui-builder/**/*"

deploy api: &deploy
  image: utopiops/devops:assume-role-12
  stage: deploy
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
    ECR_REGISTRY_URL: "${DEV_ACCOUNT}.dkr.ecr.us-east-1.amazonaws.com"
    image_tag_commit_sha: ${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
    image_tag_pipeline_id: ${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_IID}
    environment: production
    AWS_ACCESS_KEY_ID: ${DEV_AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV_AWS_SECRET_ACCESS_KEY}
    repo_name: dotenx/api
    TASK_DEFINITION_NAME: dotenx-api
    CLUSTER_NAME: dotenx
    SERVICE_NAME: api
    ENV_FILE: .env.production
    FOLDER: ao-api
  script:
    - echo ${ECR_REGISTRY_URL}/${repo_name}:${image_tag_pipeline_id}
    - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "$TASK_DEFINITION_NAME" --region "${AWS_DEFAULT_REGION}")
    - echo $TASK_DEFINITION
    - |
      if [[ -n $FOLDER ]]; then
      cd $FOLDER
      joined=[`cat .env.${environment} | awk -F== '{print "{\"name\":\""$1"\",\"value\":"$2"}"}' | sed 'H;1h;$!d;x;y/\n/,/'`]
      echo $joined
      NEW_CONTAINER_DEFINTIION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${ECR_REGISTRY_URL}/${repo_name}:${image_tag_pipeline_id}" --argjson ENV_VARS "$joined" '.taskDefinition.containerDefinitions[0].image = $IMAGE | .taskDefinition.containerDefinitions[0].environment = $ENV_VARS | .taskDefinition.containerDefinitions[0]')
      else
      NEW_CONTAINER_DEFINTIION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${ECR_REGISTRY_URL}/${repo_name}:${image_tag_pipeline_id}" '.taskDefinition.containerDefinitions[0].image = $IMAGE | .taskDefinition.containerDefinitions[0]')
      fi
    - echo $NEW_CONTAINER_DEFINTIION
    - echo "Registering new container definition..."
    - aws ecs register-task-definition --region "${AWS_DEFAULT_REGION}" --family "${TASK_DEFINITION_NAME}" --container-definitions "${NEW_CONTAINER_DEFINTIION}"
    - echo "Updating the service..."
    - aws ecs update-service --region "${AWS_DEFAULT_REGION}" --cluster "${CLUSTER_NAME}" --service "${SERVICE_NAME}"  --task-definition "${TASK_DEFINITION_NAME}"
  rules:
    - changes:
      - "ao-api/**/*"


deploy ui: &deploy_ui
  image: utopiops/devops:assume-role-12
  stage: deploy
  variables:
    CORE_USERNAME: ${DEV_CORE_USERNAME}
    CORE_PASSWORD: ${DEV_CORE_PASSWORD}
    AWS_ACCESS_KEY_ID: ${DEV_AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV_AWS_SECRET_ACCESS_KEY}
    BUCKET: app.dotenx.com
    environment: prod
    DISTRIBUTION_ID: EXE3WNBU24B4E
    build_dest: dist
    folder: ui
  environment:
    name: production-ui
    url: https://app.dotenx.com
  script:
    - mkdir ${build_dest}
    - tar -xzvf ${environment}_${folder}_build.tar.gz
    - cd ./${build_dest}
    - aws s3 sync --acl public-read . s3://${BUCKET}
    - aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/index.html"
  only:
    refs:
      - master
    changes:
      - "ui/**/*"

deploy ui-ecommerce:
  <<: *deploy_ui
  variables:
    CORE_USERNAME: ${DEV_CORE_USERNAME}
    CORE_PASSWORD: ${DEV_CORE_PASSWORD}
    AWS_ACCESS_KEY_ID: ${DEV_AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV_AWS_SECRET_ACCESS_KEY}
    BUCKET: ecommerce.dotenx.com
    environment: prod
    DISTRIBUTION_ID: E15E8F8Y85W7VE
    build_dest: dist
    folder: ui-ecommerce
  environment:
    name: production-ui-ecommerce
    url: https://ecommerce.dotenx.com
  only:
    refs:
      - master
    changes:
      - "ui-ecommerce/**/*"

deploy ui-form:
  <<: *deploy_ui
  variables:
    CORE_USERNAME: ${DEV_CORE_USERNAME}
    CORE_PASSWORD: ${DEV_CORE_PASSWORD}
    AWS_ACCESS_KEY_ID: ${DEV_AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV_AWS_SECRET_ACCESS_KEY}
    BUCKET: website.dotenx.com
    environment: prod
    DISTRIBUTION_ID: E322LZO7GK3ALW
    build_dest: dist
    folder: ui-form
  environment:
    name: production-ui-website
    url: https://website.dotenx.com
  only:
    refs:
      - master
    changes:
      - "ui-form/**/*"

deploy ui builder:
  <<: *deploy_ui
  variables:
    CORE_USERNAME: ${DEV_CORE_USERNAME}
    CORE_PASSWORD: ${DEV_CORE_PASSWORD}
    AWS_ACCESS_KEY_ID: ${DEV_AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${DEV_AWS_SECRET_ACCESS_KEY}
    BUCKET: ui.dotenx.com
    environment: prod
    DISTRIBUTION_ID: E10STPNB69BH30
    build_dest: dist
    folder: ui-builder
  environment:
    name: production-ui-builder
    url: https://ui.dotenx.com
  only:
    refs:
      - master
    changes:
      - "ui-builder/**/*"
